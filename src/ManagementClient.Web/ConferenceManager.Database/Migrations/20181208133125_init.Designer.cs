// <auto-generated />
using System;
using ConferenceManager.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ConferenceManager.Database.Migrations
{
    [DbContext(typeof(CMContext))]
    [Migration("20181208133125_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity("ConferenceManager.Database.Model.Conference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUser");

                    b.Property<DateTime>("DeleteDateTime");

                    b.Property<string>("DeleteUserName");

                    b.Property<DateTime>("EndTime");

                    b.Property<string>("Name");

                    b.Property<DateTime>("StartTime");

                    b.Property<DateTime>("UpdateDateTime");

                    b.Property<string>("UpdateUserName");

                    b.Property<int>("Updates");

                    b.HasKey("Id");

                    b.ToTable("Conferences");
                });

            modelBuilder.Entity("ConferenceManager.Database.Model.Day", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConferenceId");

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUser");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("DeleteDateTime");

                    b.Property<string>("DeleteUserName");

                    b.Property<DateTime>("UpdateDateTime");

                    b.Property<string>("UpdateUserName");

                    b.Property<int>("Updates");

                    b.HasKey("Id");

                    b.HasIndex("ConferenceId");

                    b.ToTable("Days");
                });

            modelBuilder.Entity("ConferenceManager.Database.Model.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConferenceId");

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUser");

                    b.Property<DateTime>("DeleteDateTime");

                    b.Property<string>("DeleteUserName");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateDateTime");

                    b.Property<string>("UpdateUserName");

                    b.Property<int>("Updates");

                    b.HasKey("Id");

                    b.HasIndex("ConferenceId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("ConferenceManager.Database.Model.Speaker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ConferenceId");

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUser");

                    b.Property<DateTime>("DeleteDateTime");

                    b.Property<string>("DeleteUserName");

                    b.Property<string>("Description");

                    b.Property<string>("EMail");

                    b.Property<byte[]>("Image");

                    b.Property<string>("Name");

                    b.Property<int>("TimeSlotId");

                    b.Property<DateTime>("UpdateDateTime");

                    b.Property<string>("UpdateUserName");

                    b.Property<int>("Updates");

                    b.HasKey("Id");

                    b.HasIndex("ConferenceId");

                    b.ToTable("Speakers");
                });

            modelBuilder.Entity("ConferenceManager.Database.Model.TimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreateUser");

                    b.Property<int>("DayId");

                    b.Property<DateTime>("DeleteDateTime");

                    b.Property<string>("DeleteUserName");

                    b.Property<DateTime>("EndTime");

                    b.Property<string>("Name");

                    b.Property<int>("RoomId");

                    b.Property<int>("SpeakerId");

                    b.Property<DateTime>("StartTime");

                    b.Property<DateTime>("UpdateDateTime");

                    b.Property<string>("UpdateUserName");

                    b.Property<int>("Updates");

                    b.HasKey("Id");

                    b.HasIndex("DayId");

                    b.HasIndex("RoomId");

                    b.HasIndex("SpeakerId");

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("ConferenceManager.Database.Model.Day", b =>
                {
                    b.HasOne("ConferenceManager.Database.Model.Conference", "Conference")
                        .WithMany("Days")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ConferenceManager.Database.Model.Room", b =>
                {
                    b.HasOne("ConferenceManager.Database.Model.Conference", "Conference")
                        .WithMany("Rooms")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ConferenceManager.Database.Model.Speaker", b =>
                {
                    b.HasOne("ConferenceManager.Database.Model.Conference")
                        .WithMany("Speakers")
                        .HasForeignKey("ConferenceId");
                });

            modelBuilder.Entity("ConferenceManager.Database.Model.TimeSlot", b =>
                {
                    b.HasOne("ConferenceManager.Database.Model.Day", "Day")
                        .WithMany("TimeSlots")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ConferenceManager.Database.Model.Room", "Room")
                        .WithMany("TimeSlots")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ConferenceManager.Database.Model.Speaker", "Speaker")
                        .WithMany("TimeSlots")
                        .HasForeignKey("SpeakerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
